;;; Copyright (c) 2012 Yannick Drant, Matthieu Lagacherie, All Rights Reserved

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

  (in-package :cl-cmaes)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct random_t
	(startseed :long)
	(aktseed :long)
	(aktrand :long)
	(rgrand :pointer)
	(flgstored :short)
	(hold :double))

(cffi:defcstruct timings_t
	(totaltime :double)
	(totaltotaltime :double)
	(tictoctime :double)
	(lasttictoctime :double)
	(lastclock :pointer)
	(lasttime :pointer)
	(ticclock :pointer)
	(tictime :pointer)
	(istic :short)
	(isstarted :short)
	(lastdiff :double)
	(tictoczwischensumme :double))

(cffi:defcstruct readpara_t
	(N :int)
	(seed :unsigned-int)
	(xstart :pointer)
	(typicalX :pointer)
	(typicalXcase :int)
	(rgInitialStds :pointer)
	(rgDiffMinChange :pointer)
	(stopMaxFunEvals :double)
	(facmaxeval :double)
	(stopMaxIter :double)
	(stopTolFun :double)
	(stopTolFunHist :double)
	(stopTolX :double)
	(stopTolUpXFactor :double)
	(lambda :int)
	(mu :int)
	(mucov :double)
	(mueff :double)
	(weights :pointer)
	(damps :double)
	(cs :double)
	(ccumcov :double)
	(ccov :double)
	(diagonalCov :double)
	(facupdateCmode :double)
	(weigkey :string)
	(resumefile :pointer)
	(rgsformat :pointer)
	(rgpadr :pointer)
	(rgskeyar :pointer)
	(rgp2adr :pointer)
	(n1para :int)
	(n1outpara :int)
	(n2para :int)
	(updateCmode :pointer)
	(stStopFitness :pointer))

(cffi:defcstruct readpara_t_updateCmode
	(flgalways :int)
	(modulo :double)
	(maxtime :double))

(cffi:defcstruct readpara_t_stStopFitness
	(flg :int)
	(val :double))

(cffi:defcstruct cmaes_t
	(version :string)
	(sp readpara_t)
	(rand random_t)
	(sigma :double)
	(rgxmean :pointer)
	(rgxbestever :pointer)
	(rgrgx :pointer)
	(index :pointer)
	(arFuncValueHist :pointer)
	(flgIniphase :short)
	(flgStop :short)
	(chiN :double)
	(C :pointer)
	(B :pointer)
	(rgD :pointer)
	(rgpc :pointer)
	(rgps :pointer)
	(rgxold :pointer)
	(rgout :pointer)
	(rgBDz :pointer)
	(rgdTmp :pointer)
	(rgFuncValue :pointer)
	(publicFitness :pointer)
	(gen :double)
	(countevals :double)
	(state :double)
	(maxdiagC :double)
	(mindiagC :double)
	(maxEW :double)
	(minEW :double)
	(sOutString :pointer)
	(flgEigensysIsUptodate :short)
	(flgCheckEigen :short)
	(genOfEigensysUpdate :double)
	(eigenTimings timings_t)
	(dMaxSignifKond :double)
	(dLastMinEWgroesserNull :double)
	(flgresumedone :short)
	(printtime :pointer)
	(writetime :pointer)
	(firstwritetime :pointer)
	(firstprinttime :pointer))

(cffi:defcfun ("cmaes_init" cmaes_init) :pointer
  (arg0 :pointer)
  (dimension :int)
  (xstart :pointer)
  (stddev :pointer)
  (seed :long)
  (lambda :int)
  (input_parameter_filename :string))

(cffi:defcfun ("cmaes_resume_distribution" cmaes_resume_distribution) :void
  (evo_ptr :pointer)
  (filename :string))

(cffi:defcfun ("cmaes_exit" cmaes_exit) :void
  (arg0 :pointer))

(cffi:defcfun ("cmaes_SamplePopulation" cmaes_SamplePopulation) :pointer
  (arg0 :pointer))

(cffi:defcfun ("cmaes_UpdateDistribution" cmaes_UpdateDistribution) :pointer
  (arg0 :pointer)
  (rgFitnessValues :pointer))

(cffi:defcfun ("cmaes_TestForTermination" cmaes_TestForTermination) :pointer
  (arg0 :pointer))

(cffi:defcfun ("cmaes_ReSampleSingle" cmaes_ReSampleSingle) :pointer
  (t_arg0 :pointer)
  (index :int))

(cffi:defcfun ("cmaes_ReSampleSingle_old" cmaes_ReSampleSingle_old) :pointer
  (arg0 :pointer)
  (rgx :pointer))

(cffi:defcfun ("cmaes_SampleSingleInto" cmaes_SampleSingleInto) :pointer
  (t_arg0 :pointer)
  (rgx :pointer))

(cffi:defcfun ("cmaes_UpdateEigensystem" cmaes_UpdateEigensystem) :void
  (arg0 :pointer)
  (flgforce :int))

(cffi:defcfun ("cmaes_setparam" cmaes_setparam) :void
  (arg0 :pointer)
  (keyword :string)
  (value :double))

(cffi:defcfun ("cmaes_Get" cmaes_Get) :double
  (arg0 :pointer)
  (keyword :string))

(cffi:defcfun ("cmaes_GetPtr" cmaes_GetPtr) :pointer
  (arg0 :pointer)
  (keyword :string))

(cffi:defcfun ("cmaes_GetNew" cmaes_GetNew) :pointer
  (t_arg0 :pointer)
  (keyword :string))

(cffi:defcfun ("cmaes_GetInto" cmaes_GetInto) :pointer
  (t_arg0 :pointer)
  (keyword :string)
  (mem :pointer))

(cffi:defcfun ("cmaes_ReadSignals" cmaes_ReadSignals) :void
  (arg0 :pointer)
  (filename :string))

(cffi:defcfun ("cmaes_WriteToFile" cmaes_WriteToFile) :void
  (arg0 :pointer)
  (szKeyWord :string)
  (output_filename :string))

(cffi:defcfun ("cmaes_SayHello" cmaes_SayHello) :string
  (arg0 :pointer))

(cffi:defcfun ("cmaes_NewDouble" cmaes_NewDouble) :pointer
  (n :int))

(cffi:defcfun ("cmaes_FATAL" cmaes_FATAL) :void
  (s1 :string)
  (s2 :string)
  (s3 :string)
  (s4 :string))


